create table public.users ( 
	id  		 uuid references auth.users not null,
	username text,
);

create table public.groups (
	id 				 bigint generated by default as identity primary key
		 				 (minvalue 0 start with 0 increment by 1),
	name 			 varchar(48),
	is_trashed boolean,
	user_id uuid references public.users not null
);

create table public.notes (
	id         bigint generated by default as identity primary key
		         (minvalue 0 start with 0 increment by 1),
	name       varchar(48),
	content 	 text,
	is_trashed boolean,
	group_id   bigint references public.groups,
	user_id uuid references public.users not null
);

-- SECURE THE TABLES
alter table public.users enable row level security;
alter table public.groups enable row level security;
alter table public.notes enable row level security;
-- users
create policy "Allow individual insert access" on public.users for insert with check ( auth.uid() = id);
-- groups
create policy "User can access own groups" on public.groups for select using ( auth.uid() = user_id);
create policy "User can insert own groups" on public.groups for insert with check ( auth.uid() = user_id);
create policy "User can update own groups" on public.groups for update using ( auth.uid() = user_id);
create policy "User can delete own groups" on public.groups for delete using ( auth.uid() = user_id);
-- notes
create policy "User can access own notes" on public.notes for select using ( auth.uid() = user_id);
create policy "User can insert own notes" on public.notes for insert with check ( auth.uid() = user_id);
create policy "User can update own notes" on public.notes for update using ( auth.uid() = user_id);
create policy "User can delete own notes" on public.notes for delete using ( auth.uid() = user_id);

create function public.handle_new_user()
returns trigger as $$
begin
	insert into public.users (id, username)
	values (new.id, new.email);

	return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
	after insert on auth.users
	for each row execute procedure public.handle_new_user();
